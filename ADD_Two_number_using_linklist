import java.math.BigInteger;

public class Leetcode_twonumbers {
	@SuppressWarnings("static-access")
	public static void main(String args[]) {
		
		Solution sol = new Solution();
		 ListNode l1 = new ListNode(9);
//		 l1.next = new ListNode(4);
//		 l1.next.next = new ListNode(9);
		 int large[]= {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
	//	 int large[]= {2,4,3,2,1};
		 ListNode l2 =ADDelement(large);
		 sol.printList(l1);
		 sol.printList(l2);
		 if(large.length < 17)
			 {sol.addTwoNumbers(l1,l2);}//for normal values range from 0-17 (long).
		 else
			 { sol.printList(sol.Bigg(l1,l2));}//for BigInteger values greater then long.
		
	}
	// function to insert value from array to linklist.
	public static ListNode ADDelement(int[] large) {
		ListNode dummy = new ListNode(0);
		ListNode current = dummy;
		for(int j:large) {
			 current.next=new ListNode(j);
			 current=current.next;	
	 }return dummy.next;
	}
}

class Solution {
	//Function for converting linklist into number , to print , to insert values into linklist . 
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        System.out.println("Input: ");
        printList(l1);
        printList(l2);
        
        long l1no=getNumber(l1);
        long l2no=getNumber(l2);
        
       long sum = l1no + l2no;
        System.out.println("L! and L2 :"+l1no+"\n"+l2no);
        ListNode result = createLinkedList(sum);
        
        System.out.println("\n Output: ");
        printList(result);
		return result;
        
    }
    // Function for BigInteger 
    public ListNode Bigg(ListNode l1, ListNode l2) {
    	BigInteger Big1 = ADD(l1);
    	BigInteger Big2 = ADD(l2) ;
    	BigInteger Sum = Big1.add(Big2);
    	System.out.println(Sum);
    	return createLinkedList11(Sum);
    }

    public static BigInteger ADD(ListNode node) {
        StringBuilder sb = new StringBuilder();
        while (node != null) {
            sb.insert(0, node.val);
            node = node.next;
        }
        return new BigInteger(sb.toString());
    }
    
    public static ListNode createLinkedList11(BigInteger num) {
        String numStr = num.toString();
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        for (int i = numStr.length() - 1; i >= 0; i--) {
            int digit = Character.getNumericValue(numStr.charAt(i));
            current.next = new ListNode(digit);
            current = current.next;
        }

        return dummy.next;
    }

	// Converting linked list to number
    private static long getNumber(ListNode head) {
        long number = 0L;
        long multiplier = 1L;
        while (head != null) {
            number =number+head.val * multiplier;
            multiplier *= 10;
            head = head.next;
            System.out.print("-->"+number+"-+-"+multiplier);       }
        return number;
    }

    // Creating linked list from number
    private static ListNode createLinkedList(long sum) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        if(sum==0) {
        	return dummy;
        }else {
        while (sum > 0) {
            long digit = sum % 10;
            current.next = new ListNode(digit);
            current = current.next;
            sum /= 10;
        }
        return dummy.next;}
    }

    // Printing the linked list
    public static void printList(ListNode head) {
    	while (head != null) {
            System.out.print(head.val + " -> ");
            head = head.next;
        }
        System.out.println("null");
    }
}
