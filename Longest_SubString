Problem :
Given a string s, find the length of the longest substring without duplicate characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Solution:

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;

/* " "
"dvdf"vdf
"ckilbkd"ckilb
"tmmzuxt " mzuxt*/

public class Longestsub {

	public static void main(String[] args) throws IOException {
		System.out.println("Enter a value :");
		BufferedReader s = new BufferedReader(new InputStreamReader(System.in)); 
		String inputString= s.readLine();
		
		s.close();
		inputString=inputString.replaceAll("\\s","");
		Longestsubstring(inputString);
	}
	private static String Longestsubstring(String inputString) {
		int len=(inputString.length())-1;
		int start=0,pointer,longest=0,Start = 0;
		HashMap<Character,Integer> map=new HashMap<>();
		char[] charstring = inputString.toCharArray();
		for (pointer=0;pointer<=len;pointer++) { // pointer= current variable index
			char current=charstring[pointer];
			
			if(map.containsKey(current) && start<=map.get(current) ) {
				start=map.get(current)+1;
				
			}
			if(pointer-start+1>longest) {
				longest=(pointer-start)+1;
				Start=start;
			}
			map.put(current, pointer );
			}

		
		String sub=inputString.substring(Start, Start+longest);
		System.out.printf("Longest String of length %d is :"+sub,longest);
	return sub;
	}

}

